{"version":3,"sources":["index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","p2__WEBPACK_IMPORTED_MODULE_2__","p2__WEBPACK_IMPORTED_MODULE_2___default","rootElement","document","getElementById","ReactDOM","render","a","createElement","myRef","useRef","useEffect","planeBody","mouseConstraint","canvas","current","ctx","getContext","w","width","h","height","scaleX","scaleY","world","p2","World","gravity","islandSplit","solver","tolerance","iterations","console","log","characters","character","x","y","shape","Box","body","Body","mass","position","angularVelocity","getPhysicsCoord","e","rect","getBoundingClientRect","clientX","left","clientY","top","clearRect","save","translate","scale","beginPath","forEach","_ref","char","boxBody","boxShape","tx","ty","strokeStyle","rotate","angle","fillStyle","Math","PI","stroke","fillText","restore","drawbox","moveTo","lineTo","drawPlane","lineWidth","font","c","addShape","addBody","planeShape","Plane","mouseBody","addEventListener","event","hitBodies","hitTest","map","length","RevoluteConstraint","worldPivot","collideConnected","addConstraint","touches","removeConstraint","init","animate","requestAnimationFrame","step","className","window","innerWidth","ref"],"mappings":"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","file":"static/js/main.472872c0.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport ReactDOM from 'react-dom'\nimport p2 from 'p2'\n\nimport './styles.css'\n\n\n\nfunction App() {\n  const myRef = useRef(null)\n\n  useEffect(() => {\n\n    const canvas = myRef.current\n    const ctx = canvas.getContext('2d')\n    const w = canvas.width;\n    const h = canvas.height;\n\n    let planeBody\n    let mouseConstraint\n\n    const scaleX = -100\n    const scaleY = -100\n\n    const world = new p2.World({\n      gravity: [0, -9.82],\n      islandSplit: false,\n    });\n    world.solver.tolerance = 0.01\n    world.solver.iterations = 1;\n    // world.solver.arrayStep = 1;\n    console.log(world)\n    \n\n    const characters = [\n      {\n        character: 'M',\n        x: -6.8,\n        y: 3.5,\n        shape: new p2.Box({\n          width: 1.8,\n          height: 1,\n        }),\n        body: new p2.Body({\n          mass: 1,\n          position: [0, 3],\n          angularVelocity: 1\n        })\n      },\n      {\n        character: 'I',\n        x: -2,\n        y: 3.5,\n        shape: new p2.Box({\n          width: 0.4,\n          height: 1,\n        }),\n        body: new p2.Body({\n          mass: 1,\n          position: [1, 1],\n          angularVelocity: 1\n        })\n      },\n      {\n        character: 'H',\n        x: -6,\n        y: 3.5,\n        shape: new p2.Box({\n          width: 1.5,\n          height: 1,\n        }),\n        body: new p2.Body({\n          mass: 1,\n          position: [-1, 5],\n          angularVelocity: -1\n        })\n      },\n      {\n        character: 'E',\n        x: -4.9,\n        y: 3.5,\n        shape: new p2.Box({\n          width: 1.15,\n          height: 1,\n        }),\n        body: new p2.Body({\n          mass: 1,\n          position: [-2, 4],\n          angularVelocity: -1\n        })\n      },\n      {\n        character: 'O',\n        x: -6,\n        y: 3.8,\n        shape: new p2.Box({\n          width: 1.5,\n          height: 1,\n        }),\n        body: new p2.Body({\n          mass: 1,\n          position: [-5, 3],\n          angularVelocity: -1\n        })\n      },\n      {\n        character: 'B',\n        x: -5.9,\n        y: 3.5,\n        shape: new p2.Box({\n          width: 1.4,\n          height: 1,\n        }),\n        body: new p2.Body({\n          mass: 1,\n          position: [-2, 4],\n          angularVelocity: -1\n        })\n      },\n    ]\n\n    init();\n\n    function init() {\n\n      ctx.lineWidth = 0.05;\n      ctx.font = '10px Druk';\n      \n      characters.forEach(c => {\n        c.body.addShape(c.shape)\n        world.addBody(c.body)\n      })\n\n\n      // Add a plane\n      const planeShape = new p2.Plane();\n      planeBody = new p2.Body();\n      planeBody.addShape(planeShape);\n      world.addBody(planeBody);\n\n      // Create a body for the cursor\n      const mouseBody = new p2.Body();\n      world.addBody(mouseBody);\n\n      canvas.addEventListener('pointerdown', function (event) {\n\n        // Convert the canvas coordinate to physics coordinates\n        const position = getPhysicsCoord(event);\n\n        // Check if the cursor is inside the box\n        const hitBodies = world.hitTest(position, characters.map(c => c.body));\n\n        if (hitBodies.length) {\n          \n          // Move the mouse body to the cursor position\n          mouseBody.position[0] = position[0];\n          mouseBody.position[1] = position[1];\n\n          // Create a RevoluteConstraint.\n          // This constraint lets the bodies rotate around a common point\n          mouseConstraint = new p2.RevoluteConstraint(mouseBody, hitBodies[0], {\n            worldPivot: position,\n            collideConnected: false\n          });\n          world.addConstraint(mouseConstraint);\n        }\n      });\n\n      // Sync the mouse body to be at the cursor position\n      canvas.addEventListener('mousemove', function (e) {\n        \n        const position = getPhysicsCoord(e);\n        console.log(position)\n        mouseBody.position[0] = position[0];\n        mouseBody.position[1] = position[1];\n      });\n      \n      canvas.addEventListener('touchmove', function (e) {\n        console.log(e)\n        \n        \n        const position = getPhysicsCoord(e.touches[0]);\n        console.log(position)\n        mouseBody.position[0] = position[0];\n        mouseBody.position[1] = position[1];\n      });\n\n      // Remove the mouse constraint on mouse up\n      canvas.addEventListener('mouseup', function () {\n        world.removeConstraint(mouseConstraint);\n        mouseConstraint = null;\n      });\n      \n      canvas.addEventListener('touchend', function () {\n        world.removeConstraint(mouseConstraint);\n        mouseConstraint = null;\n      });\n    }\n\n    // Convert a canvas coordiante to physics coordinate\n    function getPhysicsCoord(e) {\n      const rect = canvas.getBoundingClientRect();\n      let x = e.clientX - rect.left;\n      let y = e.clientY - rect.top;\n\n      x = (x - w / 2) / scaleX;\n      y = (y - h / 2) / scaleY;\n\n      return [x, y];\n    }\n\n    function drawbox(char, boxBody, boxShape, x, y) {\n      const tx = boxBody.position[0]\n      const ty = boxBody.position[1]\n\n      ctx.strokeStyle = 'pink'\n      ctx.save()\n      ctx.translate(tx, ty) // Translate to the center of the box\n      ctx.rotate(boxBody.angle) // Rotate to the box body frame\n      // ctx.rect(\n      //   -boxShape.width / 2,\n      //   -boxShape.height / 2,\n      //   boxShape.width,\n      //   boxShape.height,\n      // )\n\n      ctx.fillStyle = '#2c2c2c'\n\n      ctx.scale(0.1333, 0.1333)\n      ctx.rotate(Math.PI)\n      ctx.stroke()\n      ctx.fillText(char, x, y)\n      ctx.restore()\n    }\n\n    function drawPlane() {\n      const y = planeBody.position[1]\n      ctx.moveTo(-w, y)\n      ctx.lineTo(w, y)\n    }\n\n    function render() {\n      // Clear the canvas\n      ctx.clearRect(0, 0, w, h);\n\n      // Transform the canvas\n      ctx.save();\n      ctx.translate(w / 2, h / 2); // Translate to the center\n      ctx.scale(scaleX, scaleY);\n\n      // Draw all bodies\n      ctx.beginPath()\n      characters.forEach(({ character, body, shape, x, y}) => {\n        drawbox(character, body, shape, x, y )\n      })\n\n      drawPlane();\n\n      ctx.stroke()\n\n      // Restore transform\n      ctx.restore();\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Move physics bodies forward in time\n      world.step(1 / 60);\n      render();\n    }\n\n    animate()\n    \n  }, [])\n\n  return (\n    <div className=\"App\">\n      <canvas width={window.innerWidth} height=\"1200\" ref={myRef} />\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}